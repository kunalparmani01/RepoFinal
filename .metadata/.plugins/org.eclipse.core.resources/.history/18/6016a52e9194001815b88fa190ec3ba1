package com.jda.core;


import java.io.File;
import java.io.FilenameFilter;
import java.io.IOException;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.type.TypeReference;

import com.jda.util.Scan;

public class AddressBookManager {
	
	public static void main(String[] args) throws IOException{
		
	
		//private static List<String> allAddressBooks = Utility.allFilesInFolder();
		private static List<AddressBook> allOpenAddressBooks = new ArrayList<>();
		
		File folder = new File("//home//bridgelabz//workspace//ObjectOriented//src");
      File[] allFiles = folder.listFiles(new FilenameFilter() {
          @Override
          public boolean accept(File dir, String name) {
              return name.toLowerCase().endsWith(".json");
          }
      });
      List<String> allAddressBooks = new ArrayList<>();
      for (int i = 0; i < allFiles.length; i++) {
          allAddressBooks.add(allFiles[i].getName());
      }
      
		
		while(true)
		{
			int value;
			
			System.out.println("Enter 1 - to Create a new address book");
			System.out.println("Enter 2 - to Open an address book");
			System.out.println("Enter 3 - to Close an address book");
			System.out.println("Enter 4 - to Save  an address book");
			System.out.println("Enter 5 - to Save  As an address book");
			System.out.println("Enter 6 - to Quit ");
			value = Scan.getInt();
		
		if(value!=6)
		{
		switch (value ) {
		case 1:
			CreateAddressBook();
			
			
		case 2:
			
			OpenAddressBook();
			break;
			
	case 3:
			
			CloseAddressBook();
			break;
			
	case 4:
		
		SaveAddressBook();
		
case 5:
		
		SaveAsAddressBook();
		

		default:
			break;
		}
	}
		else
			break;
		}
	}

	private static void SaveAsAddressBook() {
		// TODO Auto-generated method stub
		
	}

	private static void SaveAddressBook() {
		// TODO Auto-generated method stub
		
	}

	private static void CloseAddressBook() {
		// TODO Auto-generated method stub
		
	}

	private static void OpenAddressBook() {
		File file = new File("//home//bridgelabz//workspace//ObjectOriented//src");
		if(file.isDirectory())
		{
		for (File filee:file.listFiles())
		{
			System.out.println(filee.getName());
		}
		
		System.out.println("Enter file name to open");
		Scanner sc = new Scanner(System.in);
		String name = sc.nextLine();
		
		ObjectMapper mapper = new ObjectMapper();
		List<Person> person = new ArrayList<>();
		
		try {
			person = mapper.readValue(new File("//home//bridgelabz//workspace//ObjectOriented//src" + "/" + name + ".json"), new TypeReference<ArrayList<Person>>() {});
		} catch (IOException e) {
			person = new ArrayList<Person>();
		}
		
		AddressBook addressBook = new AddressBook(name);
		while (true) {
			System.out.println("1. Create new entry");
			System.out.println("2. Edit information");
			System.out.println("3. Delete an entry");
			System.out.println("4. Sort by last name");
			System.out.println("5. Sort by zip");
		
			Int choice = Scan.getInt();
				switch (choice) {
				case 1: {
				person = addressBook.addEntry(person);
				}
				break;
				case 2: {
				person = addressBook.editInfo(person);
				}
				break;
				case 3: {
				person = addressBook.deleteEntry(person);
				}
				break;
				case 4: {
				person = addressBook.sortByLastName(person);
				}
				break;
				case 5: {
				person = addressBook.sortByZip(person);
				}
				break;
				}
				} 
				}
				
			
	
	
	

		else
		{
			System.out.println("Directory is empty");
		}
		addressBook.setAllPersons(person);
		allOpenAddressBooks.add(addressBook);
	}

	private static void CreateAddressBook() throws IOException {
		System.out.println("Enter Name of Address Book");
		Scanner sc = new Scanner(System.in);
		String addressname = sc.next();
		File file = new File("//home//bridgelabz//workspace//ObjectOriented//src//" + addressname + ".json");
		
		if(file.createNewFile()){
			System.out.println("File is created!");
		}else{
			System.out.println("File exists");
			
		}
		
	}

}
